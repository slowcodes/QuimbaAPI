"""db initialization 5

Revision ID: dc8b0053ca78
Revises: 
Create Date: 2025-07-31 15:04:23.168372

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'dc8b0053ca78'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_supply_detail_id', table_name='supply_detail')
    op.drop_table('supply_detail')
    op.drop_index('ix_consultant_schedule_id', table_name='consultant_schedule')
    op.drop_index('ix_specialist_idx', table_name='consultant_schedule')
    op.drop_table('consultant_schedule')
    op.drop_index('ix_payment_id', table_name='payment')
    op.drop_table('payment')


    op.drop_index('ix_approved_lab_booking_result_id', table_name='approved_lab_booking_result')
    op.drop_table('approved_lab_booking_result')
    op.drop_index('ix_lab_result_id', table_name='lab_result')
    op.drop_table('lab_result')
    op.drop_index('ix_service_booking_communication_log_id', table_name='service_booking_communication_log')
    op.drop_table('service_booking_communication_log')
    op.drop_index('ix_client_vital_id', table_name='client_vital')
    op.drop_table('client_vital')

    op.drop_index('ix_service_booking_communication_id', table_name='service_booking_communication')
    op.drop_table('service_booking_communication')


    op.drop_index('ix_lab_verified_result_id', table_name='lab_verified_result')
    op.drop_table('lab_verified_result')


    op.drop_index('ix_pharmacy_prescription_detail_id', table_name='pharmacy_prescription_detail')
    op.drop_table('pharmacy_prescription_detail')

    op.drop_index('ix_pharmacy_prescription_id', table_name='pharmacy_prescription')
    op.drop_table('pharmacy_prescription')
    op.drop_index('ix_user_auth_Logs_id', table_name='user_auth_Logs')
    op.drop_table('user_auth_Logs')

    op.drop_index('ix_lab_sample_result_id', table_name='lab_sample_result')
    op.drop_table('lab_sample_result')
    op.drop_index('ix_pharmacy_drug_category_tag_id', table_name='pharmacy_drug_category_tag')
    op.drop_table('pharmacy_drug_category_tag')
    op.drop_index('ix_referred_transaction_settlement_detail_id', table_name='referred_transaction_settlement_detail')
    op.drop_table('referred_transaction_settlement_detail')
    op.drop_index('ix_referred_transaction_settlement_id', table_name='referred_transaction_settlement')
    op.drop_table('referred_transaction_settlement')
    op.drop_index('ix_client_drug_allergy_id', table_name='client_drug_allergy')
    op.drop_table('client_drug_allergy')


    op.drop_index('ix_product_barcode_id', table_name='product_barcode')
    op.drop_table('product_barcode')
    op.drop_index('ix_lab_experiment_result_reading_id', table_name='lab_experiment_result_reading')
    op.drop_table('lab_experiment_result_reading')
    op.drop_index('ix_person_type_id', table_name='person_type')
    op.drop_table('person_type')
    op.drop_index('ix_client_food_allergy_id', table_name='client_food_allergy')
    op.drop_table('client_food_allergy')

    op.drop_index('ix_consultant_specialist_specialization_id', table_name='consultant_specialist_specialization')
    op.drop_index('ix_specialist_specialization', table_name='consultant_specialist_specialization')
    op.drop_table('consultant_specialist_specialization')

    op.drop_index('ix_lab_result_logs_id', table_name='lab_result_logs')
    op.drop_table('lab_result_logs')
    op.drop_index('ix_lab_experiment_parameter_bounds_id', table_name='lab_experiment_parameter_bounds')
    op.drop_table('lab_experiment_parameter_bounds')
    op.drop_index('ix_sales_id', table_name='sales')
    op.drop_table('sales')

    op.drop_index('ix_supply_pharm_detail_id', table_name='supply_pharm_detail')
    op.drop_table('supply_pharm_detail')
    op.drop_index('ix_supply_id', table_name='supply')
    op.drop_table('supply')
    op.drop_index('ix_pharmacy_hierarchy_id', table_name='pharmacy_hierarchy')
    op.drop_table('pharmacy_hierarchy')
    op.drop_index('ix_service_booking_clinical_examination_id', table_name='service_booking_clinical_examination')
    op.drop_table('service_booking_clinical_examination')
    op.drop_index('ix_lab_service_experiment_id', table_name='lab_service_experiment')
    op.drop_table('lab_service_experiment')

    op.drop_index('ix_pharmacy_drug_movement_id', table_name='pharmacy_drug_movement')
    op.drop_table('pharmacy_drug_movement')
    op.drop_index('ix_lab_service_bundle_collection_id', table_name='lab_service_bundle_collection')
    op.drop_table('lab_service_bundle_collection')

    op.drop_index('ix_product_package_id', table_name='product_package')
    op.drop_table('product_package')

    op.drop_index('ix_referred_transaction_id', table_name='referred_transaction')
    op.drop_table('referred_transaction')
    op.drop_index('ix_product_packaging_hierarchy_id', table_name='product_packaging_hierarchy')
    op.drop_table('product_packaging_hierarchy')
    op.drop_index('ix_client_notification_subscription_id', table_name='client_notification_subscription')
    op.drop_table('client_notification_subscription')
    op.drop_table('client_notification')

    op.drop_index('ix_presenting_symptoms_id', table_name='presenting_symptoms')
    op.drop_table('presenting_symptoms')
    op.drop_index('ix_clinical_examination_id', table_name='clinical_examination')
    op.drop_index('ix_exam_conducted_by', table_name='clinical_examination')
    op.drop_table('clinical_examination')
    op.drop_index('ix_lab_collected_result_id', table_name='lab_collected_result')
    op.drop_table('lab_collected_result')
    op.drop_index('ix_lab_result_experiments_id', table_name='lab_result_experiments')
    op.drop_table('lab_result_experiments')
    op.drop_index('ix_lab_experiment_parameter_id', table_name='lab_experiment_parameter')
    op.drop_table('lab_experiment_parameter')
    op.drop_index('ix_lab_experiment_id', table_name='lab_experiment')
    op.drop_table('lab_experiment')
    op.drop_index('ix_lab_collected_sample_id', table_name='lab_collected_sample')
    op.drop_table('lab_collected_sample')
    op.drop_index('ix_lab_service_queue_id', table_name='lab_service_queue')
    op.drop_table('lab_service_queue')

    op.drop_index('ix_pharmacy_id', table_name='pharmacy')
    op.drop_table('pharmacy')
    op.drop_index('ix_lab_service_group_tag_id', table_name='lab_service_group_tag')
    op.drop_table('lab_service_group_tag')

    op.drop_index('ix_lab_service_group_id', table_name='lab_service_group')
    op.drop_table('lab_service_group')
    op.drop_index('ix_lab_service_id', table_name='lab_service')
    op.drop_table('lab_service')
    op.drop_index('ix_package_transaction_id', table_name='package_transaction')
    op.drop_table('package_transaction')
    op.drop_index('ix_service_bundle_id', table_name='service_bundle')
    op.drop_table('service_bundle')
    op.drop_index('ix_pharmacy_drug_form_package_id', table_name='pharmacy_drug_form_package')
    op.drop_table('pharmacy_drug_form_package')
    op.drop_index('ix_pharmacy_drug_form_id', table_name='pharmacy_drug_form')
    op.drop_table('pharmacy_drug_form')

    op.drop_index('ix_pharmacy_drug_category_id', table_name='pharmacy_drug_category')
    op.drop_table('pharmacy_drug_category')
    op.drop_index('ix_consultation_queue_id', table_name='consultation_queue')
    op.drop_index('ix_schedule_status', table_name='consultation_queue')
    op.drop_table('consultation_queue')
    op.drop_index('ix_consultant_in_hours_id', table_name='consultant_in_hours')
    op.drop_table('consultant_in_hours')
    op.drop_index('ix_consultant_specialist_id', table_name='consultant_specialist')
    op.drop_index('ix_service_booking_detail_id', table_name='service_booking_detail')
    op.drop_table('service_booking_detail')
    op.drop_index('ix_service_booking_id', table_name='service_booking')
    op.drop_table('service_booking')
    op.drop_index('ix_client_privacy_id', table_name='client_privacy')
    op.drop_table('client_privacy')
    op.drop_index('ix_client_id', table_name='client')
    op.drop_table('client')
    op.drop_index('ix_client_referral_id', table_name='client')
    op.drop_table('client_referral')
    op.drop_index('ix_user_id', table_name='consultant_specialist')
    op.drop_table('consultant_specialist')
    op.drop_index('ix_consultant_department_department', table_name='consultant_department')
    op.drop_index('ix_consultant_department_id', table_name='consultant_department')
    op.drop_table('consultant_department')
    op.drop_index('ix_user_group_member_id', table_name='user_group_member')
    op.drop_table('user_group_member')
    op.drop_index('ix_user_group_privilege_id', table_name='user_group_privilege')
    op.drop_table('user_group_privilege')
    op.drop_index('ix_user_privilege_listing_id', table_name='user_privilege_listing')
    op.drop_table('user_privilege_listing')
    op.drop_index('ix_user_group_id', table_name='user_group')
    op.drop_table('user_group')
    op.drop_index('ix_symptom_id', table_name='symptom')
    op.drop_index('ix_symptom_symptom', table_name='symptom')
    op.drop_table('symptom')
    op.drop_index('ix_supplier_id', table_name='supplier')
    op.drop_table('supplier')
    op.drop_index('ix_organization_people_id', table_name='organization_people')
    op.drop_table('organization_people')
    op.drop_index('ix_organization_id', table_name='organization')
    op.drop_table('organization')
    op.drop_index('ix_lga_id', table_name='lga')
    op.drop_table('lga')
    op.drop_index('ix_service_listing_service_id', table_name='service_listing')
    op.drop_table('service_listing')
    op.drop_index('ix_service_price_code_id', table_name='service_price_code')
    op.drop_table('service_price_code')
    op.drop_index('ix_transaction_id', table_name='transaction')
    op.drop_table('transaction')
    op.drop_index('ix_users_id', table_name='users')
    op.drop_table('users')
    op.drop_index('ix_sales_price_code_id', table_name='sales_price_code')
    op.drop_table('sales_price_code')
    op.drop_index('ix_state_id', table_name='state')
    op.drop_index('ix_state_state', table_name='state')
    op.drop_table('state')
    op.drop_index('ix_pharmacy_drug_id', table_name='pharmacy_drug')
    op.drop_table('pharmacy_drug')
    op.drop_index('ix_brand_name', table_name='product')
    op.drop_index('ix_product_id', table_name='product')
    op.drop_index('ix_product_name', table_name='product')
    op.drop_table('product')
    op.drop_index('ix_client_occupation_id', table_name='client_occupation')
    op.drop_table('client_occupation')
    op.drop_index('ix_laboratory_id', table_name='laboratory')
    op.drop_table('laboratory')
    op.drop_index('ix_user_role_id', table_name='user_role')
    op.drop_table('user_role')

    op.drop_index('idx_person_email', table_name='person')
    op.drop_index('idx_person_first_name', table_name='person')
    op.drop_index('idx_person_last_name', table_name='person')
    op.drop_index('idx_person_phone', table_name='person')
    op.drop_index('ix_person_id', table_name='person')
    op.drop_index('ix_person_phone', table_name='person')
    op.drop_table('person')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('symptom',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('symptom_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('symptom', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='symptom_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_symptom_symptom', 'symptom', ['symptom'], unique=False)
    op.create_index('ix_symptom_id', 'symptom', ['id'], unique=False)
    op.create_table('user_group_member',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('member_since', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['user_group.id'], name='user_group_member_group_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_group_member_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_group_member_pkey')
    )
    op.create_index('ix_user_group_member_id', 'user_group_member', ['id'], unique=False)
    op.create_table('consultation_queue',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('schedule_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('scheduled_at', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('All', 'Waiting', 'Processed', 'Processing', 'Cancelled', name='queuestatus'), autoincrement=False, nullable=True),
    sa.Column('booking_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('specialization_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('consultation_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['service_booking_detail.id'], name='consultation_queue_booking_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['schedule_id'], ['consultant_in_hours.id'], name='consultation_queue_schedule_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['specialization_id'], ['consultant_department.id'], name='consultation_queue_specialization_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='consultation_queue_pkey')
    )
    op.create_index('ix_schedule_status', 'consultation_queue', ['schedule_id', 'status'], unique=False)
    op.create_index('ix_consultation_queue_id', 'consultation_queue', ['id'], unique=False)
    op.create_table('client_privacy',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_age_privacy', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_sex_privacy', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_name_privacy', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_others_privacy', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], name='client_privacy_client_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='client_privacy_pkey')
    )
    op.create_index('ix_client_privacy_id', 'client_privacy', ['id'], unique=False)
    op.create_table('pharmacy_drug_category',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('pharmacy_drug_category_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('group', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('use', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['pharmacy_drug_category.id'], name='pharmacy_drug_category_parent_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pharmacy_drug_category_pkey'),
    sa.UniqueConstraint('group', name='pharmacy_drug_category_group_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_pharmacy_drug_category_id', 'pharmacy_drug_category', ['id'], unique=False)
    op.create_table('user_group_privilege',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('privilege_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('can_read', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('can_write', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('can_execute', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['user_group.id'], name='user_group_privilege_group_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['privilege_id'], ['user_privilege_listing.id'], name='user_group_privilege_privilege_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_group_privilege_pkey')
    )
    op.create_index('ix_user_group_privilege_id', 'user_group_privilege', ['id'], unique=False)
    op.create_table('pharmacy_drug_form_package',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('pharmacy_drug_form_package_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('form_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('package_container', postgresql.ENUM('Cartoon', 'Card', 'Tablet', 'Pack', 'Capsule', 'Can', 'Bottle', 'Patch', name='packagingtype'), autoincrement=False, nullable=True),
    sa.Column('sales_price_code_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['form_id'], ['pharmacy_drug_form.id'], name='pharmacy_drug_form_package_form_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sales_price_code_id'], ['sales_price_code.id'], name='pharmacy_drug_form_package_sales_price_code_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pharmacy_drug_form_package_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_pharmacy_drug_form_package_id', 'pharmacy_drug_form_package', ['id'], unique=False)
    op.create_table('package_transaction',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('package_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['package_id'], ['service_bundle.id'], name='package_transaction_package_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], name='package_transaction_transaction_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='package_transaction_pkey')
    )
    op.create_index('ix_package_transaction_id', 'package_transaction', ['id'], unique=False)
    op.create_table('lab_service_group_tag',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('lab_service_group', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lab_service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['lab_service_group'], ['lab_service_group.id'], name='lab_service_group_tag_lab_service_group_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['lab_service_id'], ['lab_service.id'], name='lab_service_group_tag_lab_service_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_service_group_tag_pkey')
    )
    op.create_index('ix_lab_service_group_tag_id', 'lab_service_group_tag', ['id'], unique=False)
    op.create_table('pharmacy',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('pharmacy_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('org_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organization.id'], name='pharmacy_org_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pharmacy_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_pharmacy_id', 'pharmacy', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('username', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('Active', 'Suspended', 'Deleted', 'Inactive', name='accountstatus'), autoincrement=False, nullable=True),
    sa.Column('person_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['person_id'], ['person.id'], name='users_person_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('username', name='users_username_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_id', 'users', ['id'], unique=False)
    op.create_table('service_booking_detail',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('service_booking_detail_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('price_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('booking_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('booking_type', postgresql.ENUM('Laboratory', 'Consultation', 'Appointment', name='bookingtype'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['service_booking.id'], name='service_booking_detail_booking_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['price_code'], ['service_price_code.id'], name='service_booking_detail_price_code_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['service_listing.service_id'], name='service_booking_detail_service_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='service_booking_detail_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_service_booking_detail_id', 'service_booking_detail', ['id'], unique=False)
    op.create_table('lab_service_queue',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('lab_service_queue_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('priority', postgresql.ENUM('Normal', 'High', 'Low', name='queuepriority'), autoincrement=False, nullable=True),
    sa.Column('lab_service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('scheduled_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('All', 'Waiting', 'Processed', 'Processing', 'Cancelled', name='queuestatus'), autoincrement=False, nullable=True),
    sa.Column('booking_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['service_booking_detail.id'], name='lab_service_queue_booking_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['lab_service_id'], ['lab_service.id'], name='lab_service_queue_lab_service_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_service_queue_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_lab_service_queue_id', 'lab_service_queue', ['id'], unique=False)
    op.create_table('lab_experiment_parameter',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('lab_experiment_parameter_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('parameter', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('measuring_unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('parameter_type', postgresql.ENUM('Number', 'Ratio', 'Description', name='parametertype'), autoincrement=False, nullable=True),
    sa.Column('exp_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['exp_id'], ['lab_experiment.id'], name='lab_experiment_parameter_exp_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_experiment_parameter_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_lab_experiment_parameter_id', 'lab_experiment_parameter', ['id'], unique=False)
    op.create_table('lab_result_experiments',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('sample_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['sample_id'], ['lab_collected_sample.id'], name='lab_result_experiments_sample_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_result_experiments_pkey')
    )
    op.create_index('ix_lab_result_experiments_id', 'lab_result_experiments', ['id'], unique=False)
    op.create_table('service_booking',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('service_booking_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('booking_status', postgresql.ENUM('Processing', 'Processed', 'Suspended', 'Verified', name='bookingstatus'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], name='service_booking_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], name='service_booking_transaction_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='service_booking_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_service_booking_id', 'service_booking', ['id'], unique=False)
    op.create_table('consultant_department',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('consultant_department_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('department', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('specialist_title', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='consultant_department_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_consultant_department_id', 'consultant_department', ['id'], unique=False)
    op.create_index('ix_consultant_department_department', 'consultant_department', ['department'], unique=False)
    op.create_table('service_bundle',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('service_bundle_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('bundles_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('bundles_desc', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('discount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bundle_type', postgresql.ENUM('Laboratory', 'Administration', 'Consultation', 'Appointment', name='servicetype'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='service_bundle_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_service_bundle_id', 'service_bundle', ['id'], unique=False)
    op.create_table('person',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('person_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('middle_name', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('sex', postgresql.ENUM('Male', 'Female', name='sex'), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=11), autoincrement=False, nullable=True),
    sa.Column('enrollment_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.CheckConstraint('length(phone::text) <= 11', name='check_phone_length'),
    sa.PrimaryKeyConstraint('id', name='person_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_person_phone', 'person', ['phone'], unique=False)
    op.create_index('ix_person_id', 'person', ['id'], unique=False)
    op.create_index('idx_person_phone', 'person', ['phone'], unique=False)
    op.create_index('idx_person_last_name', 'person', ['last_name'], unique=False)
    op.create_index('idx_person_first_name', 'person', ['first_name'], unique=False)
    op.create_index('idx_person_email', 'person', ['email'], unique=False)
    op.create_table('lab_collected_result',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('collected_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('issued_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('collected_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['issued_by'], ['users.id'], name='lab_collected_result_issued_by_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_collected_result_pkey')
    )
    op.create_index('ix_lab_collected_result_id', 'lab_collected_result', ['id'], unique=False)
    op.create_table('presenting_symptoms',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('clinical_examination_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('symptom_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('severity', postgresql.ENUM('Low', 'Medium', 'High', name='severity'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['clinical_examination_id'], ['clinical_examination.id'], name='presenting_symptoms_clinical_examination_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['symptom_id'], ['symptom.id'], name='presenting_symptoms_symptom_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='presenting_symptoms_pkey')
    )
    op.create_index('ix_presenting_symptoms_id', 'presenting_symptoms', ['id'], unique=False)
    op.create_table('transaction',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('transaction_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transaction_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('transaction_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('discount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('transaction_status', postgresql.ENUM('All', 'Open', 'Closed', name='transactiontype'), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='transaction_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='transaction_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_transaction_id', 'transaction', ['id'], unique=False)
    op.create_table('client_notification',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('client_notification_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('notification', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('default_sms_msg', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('default_whatsapp_msg', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('default_email_msg', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='client_notification_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('client_notification_subscription',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('msg_type', postgresql.ENUM('SMS', 'Email', 'WhatsApp', name='msgtype'), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('notification_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], name='client_notification_subscription_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['notification_id'], ['client_notification.id'], name='client_notification_subscription_notification_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='client_notification_subscription_pkey')
    )
    op.create_index('ix_client_notification_subscription_id', 'client_notification_subscription', ['id'], unique=False)
    op.create_table('product_packaging_hierarchy',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('parent_package_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('package_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('child_quantity_per_parent', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['package_id'], ['pharmacy_drug_form_package.id'], name='product_packaging_hierarchy_package_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_package_id'], ['pharmacy_drug_form_package.id'], name='product_packaging_hierarchy_parent_package_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='product_packaging_hierarchy_pkey')
    )
    op.create_index('ix_product_packaging_hierarchy_id', 'product_packaging_hierarchy', ['id'], unique=False)
    op.create_table('referred_transaction',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('referred_transaction_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('transaction_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('referral_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('Settled', 'UnSettled', name='referredtransactionstatus'), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['referral_id'], ['client_referral.id'], name='referred_transaction_referral_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], name='referred_transaction_transaction_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='referred_transaction_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_referred_transaction_id', 'referred_transaction', ['id'], unique=False)
    op.create_table('consultant_specialist',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('consultant_specialist_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='consultant_specialist_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='consultant_specialist_pkey'),
    sa.UniqueConstraint('user_id', name='consultant_specialist_user_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_user_id', 'consultant_specialist', ['user_id'], unique=False)
    op.create_index('ix_consultant_specialist_id', 'consultant_specialist', ['id'], unique=False)
    op.create_table('clinical_examination',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('clinical_examination_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('presenting_complaints', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('conducted_at', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('conducted_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['conducted_by'], ['users.id'], name='clinical_examination_conducted_by_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], name='clinical_examination_transaction_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='clinical_examination_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_exam_conducted_by', 'clinical_examination', ['conducted_by'], unique=False)
    op.create_index('ix_clinical_examination_id', 'clinical_examination', ['id'], unique=False)
    op.create_table('service_price_code',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('service_price_code_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('service_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('discount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='service_price_code_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_service_price_code_id', 'service_price_code', ['id'], unique=False)
    op.create_table('client',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('client_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('photo', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('person_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('marital_status', postgresql.ENUM('Single', 'Married', 'Divorced', 'Separated', 'Confidential', name='maritalstatus'), autoincrement=False, nullable=False),
    sa.Column('date_of_birth', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('referral_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('blood_group', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('address', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('lga_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('occupation_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['lga_id'], ['lga.id'], name='client_lga_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['occupation_id'], ['client_occupation.id'], name='client_occupation_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['person_id'], ['person.id'], name='client_person_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['referral_id'], ['client_referral.id'], name='client_referral_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='client_pkey'),
    sa.UniqueConstraint('person_id', name='client_person_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_client_id', 'client', ['id'], unique=False)
    op.create_table('product_package',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('product_package_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('package_container', postgresql.ENUM('Cartoon', 'Card', 'Tablet', 'Pack', 'Capsule', 'Can', 'Bottle', 'Patch', name='packagingtype'), autoincrement=False, nullable=True),
    sa.Column('sales_price_code_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], name='product_package_product_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sales_price_code_id'], ['sales_price_code.id'], name='product_package_sales_price_code_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='product_package_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_product_package_id', 'product_package', ['id'], unique=False)
    op.create_table('consultant_in_hours',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('specialist_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('frequency', postgresql.ENUM('Weekly', 'Daily', 'EveryWeekday', 'WeekendsOnly', name='inhourfrequency'), autoincrement=False, nullable=True),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['service_id'], ['service_listing.service_id'], name='consultant_in_hours_service_id_fkey'),
    sa.ForeignKeyConstraint(['specialist_id'], ['consultant_specialist.id'], name='consultant_in_hours_specialist_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='consultant_in_hours_pkey')
    )
    op.create_index('ix_consultant_in_hours_id', 'consultant_in_hours', ['id'], unique=False)
    op.create_table('client_referral',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('client_referral_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('org_people_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['org_people_id'], ['organization_people.id'], name='client_referral_org_people_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='client_referral_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_client_referral_id', 'client_referral', ['id'], unique=False)
    op.create_table('lab_service_bundle_collection',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('bundles_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lab_service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bundles_id'], ['service_bundle.id'], name='lab_service_bundle_collection_bundles_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['lab_service_id'], ['service_listing.service_id'], name='lab_service_bundle_collection_lab_service_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_service_bundle_collection_pkey')
    )
    op.create_index('ix_lab_service_bundle_collection_id', 'lab_service_bundle_collection', ['id'], unique=False)
    op.create_table('pharmacy_drug_movement',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('drug_form', postgresql.ENUM('Tablet', 'Capsule', 'Syrup', 'Suspension', 'Solution', 'Injection', 'Cream', 'Ointment', 'Gel', 'Lotion', 'Patch', 'Suppository', 'Powder', 'Lozenge', 'Spray', 'Drop', 'Inhaler', 'Granule', 'Foam', 'Enema', name='form'), autoincrement=False, nullable=True),
    sa.Column('drug_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('package_type', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('moved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['drug_id'], ['pharmacy_drug.id'], name='pharmacy_drug_movement_drug_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['package_type'], ['product_package.id'], name='pharmacy_drug_movement_package_type_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], name='pharmacy_drug_movement_transaction_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pharmacy_drug_movement_pkey')
    )
    op.create_index('ix_pharmacy_drug_movement_id', 'pharmacy_drug_movement', ['id'], unique=False)
    op.create_table('sales_price_code',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('sales_price_code_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('selling_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('buying_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('date_created', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='sales_price_code_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_sales_price_code_id', 'sales_price_code', ['id'], unique=False)
    op.create_table('lab_service_experiment',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('lab_service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('experiment_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['experiment_id'], ['lab_experiment.id'], name='lab_service_experiment_experiment_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['lab_service_id'], ['lab_service.id'], name='lab_service_experiment_lab_service_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_service_experiment_pkey')
    )
    op.create_index('ix_lab_service_experiment_id', 'lab_service_experiment', ['id'], unique=False)
    op.create_table('service_booking_clinical_examination',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('booking_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('clinical_examination_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['service_booking.id'], name='service_booking_clinical_examination_booking_id_fkey'),
    sa.ForeignKeyConstraint(['clinical_examination_id'], ['clinical_examination.id'], name='service_booking_clinical_examinati_clinical_examination_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='service_booking_clinical_examination_pkey')
    )
    op.create_index('ix_service_booking_clinical_examination_id', 'service_booking_clinical_examination', ['id'], unique=False)
    op.create_table('pharmacy_hierarchy',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('pharmacy_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('parent_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['pharmacy.id'], name='pharmacy_hierarchy_parent_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['pharmacy_id'], ['pharmacy.id'], name='pharmacy_hierarchy_pharmacy_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pharmacy_hierarchy_pkey')
    )
    op.create_index('ix_pharmacy_hierarchy_id', 'pharmacy_hierarchy', ['id'], unique=False)
    op.create_table('supply_pharm_detail',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('supply_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('drug_form', postgresql.ENUM('Tablet', 'Capsule', 'Syrup', 'Suspension', 'Solution', 'Injection', 'Cream', 'Ointment', 'Gel', 'Lotion', 'Patch', 'Suppository', 'Powder', 'Lozenge', 'Spray', 'Drop', 'Inhaler', 'Granule', 'Foam', 'Enema', name='form'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['supply_id'], ['supply.id'], name='supply_pharm_detail_supply_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='supply_pharm_detail_pkey')
    )
    op.create_index('ix_supply_pharm_detail_id', 'supply_pharm_detail', ['id'], unique=False)
    op.create_table('supply',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('supply_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('supplier_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('pharmacy_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['pharmacy_id'], ['pharmacy.id'], name='supply_pharmacy_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['supplier_id'], ['supplier.id'], name='supply_supplier_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], name='supply_transaction_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='supply_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_supply_id', 'supply', ['id'], unique=False)
    op.create_table('sales',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('package_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['package_id'], ['product_package.id'], name='sales_package_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], name='sales_transaction_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sales_pkey')
    )
    op.create_index('ix_sales_id', 'sales', ['id'], unique=False)
    op.create_table('lab_experiment_parameter_bounds',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('parameter_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('upper_bound', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('lower_bound', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('boundary_type', postgresql.ENUM('Normal', 'Abnormal', 'Invalid', name='boundarytype'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parameter_id'], ['lab_experiment_parameter.id'], name='lab_experiment_parameter_bounds_parameter_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_experiment_parameter_bounds_pkey')
    )
    op.create_index('ix_lab_experiment_parameter_bounds_id', 'lab_experiment_parameter_bounds', ['id'], unique=False)
    op.create_table('lab_result_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('logged_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('booking_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('logged_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('action', postgresql.ENUM('Issued', 'Archived', 'Ready', 'Approved', name='resultstatus'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['service_booking.id'], name='lab_result_logs_booking_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['logged_by'], ['users.id'], name='lab_result_logs_logged_by_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_result_logs_pkey')
    )
    op.create_index('ix_lab_result_logs_id', 'lab_result_logs', ['id'], unique=False)
    op.create_table('service_listing',
    sa.Column('service_id', sa.INTEGER(), server_default=sa.text("nextval('service_listing_service_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('price_code', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ext_turn_around_time', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('visibility', postgresql.ENUM('Disabled', 'Active', name='storevisibility'), autoincrement=False, nullable=True),
    sa.Column('serviceType', postgresql.ENUM('Laboratory', 'Administration', 'Consultation', 'Appointment', name='servicetype'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['price_code'], ['service_price_code.id'], name='service_listing_price_code_fkey'),
    sa.PrimaryKeyConstraint('service_id', name='service_listing_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_service_listing_service_id', 'service_listing', ['service_id'], unique=False)
    op.create_table('consultant_specialist_specialization',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('specialist_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('specialism_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['specialism_id'], ['consultant_department.id'], name='consultant_specialist_specialization_specialism_id_fkey'),
    sa.ForeignKeyConstraint(['specialist_id'], ['consultant_specialist.id'], name='consultant_specialist_specialization_specialist_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='consultant_specialist_specialization_pkey')
    )
    op.create_index('ix_specialist_specialization', 'consultant_specialist_specialization', ['specialist_id', 'specialism_id'], unique=False)
    op.create_index('ix_consultant_specialist_specialization_id', 'consultant_specialist_specialization', ['id'], unique=False)
    op.create_table('state',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('state_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('state', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='state_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_state_state', 'state', ['state'], unique=True)
    op.create_index('ix_state_id', 'state', ['id'], unique=False)
    op.create_table('pharmacy_drug_form',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('pharmacy_drug_form_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('drug_form', postgresql.ENUM('Tablet', 'Capsule', 'Syrup', 'Suspension', 'Solution', 'Injection', 'Cream', 'Ointment', 'Gel', 'Lotion', 'Patch', 'Suppository', 'Powder', 'Lozenge', 'Spray', 'Drop', 'Inhaler', 'Granule', 'Foam', 'Enema', name='form'), autoincrement=False, nullable=True),
    sa.Column('drug_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['drug_id'], ['pharmacy_drug.id'], name='pharmacy_drug_form_drug_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pharmacy_drug_form_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_pharmacy_drug_form_id', 'pharmacy_drug_form', ['id'], unique=False)
    op.create_table('client_food_allergy',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('food', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('detail', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('risk_severity', postgresql.ENUM('Low', 'Medium', 'High', name='severity'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], name='client_food_allergy_client_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='client_food_allergy_pkey')
    )
    op.create_index('ix_client_food_allergy_id', 'client_food_allergy', ['id'], unique=False)
    op.create_table('person_type',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('person_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('person_type', postgresql.ENUM('Client', 'User', 'Referral', name='typeofperson'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['person_id'], ['person.id'], name='person_type_person_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='person_type_pkey')
    )
    op.create_index('ix_person_type_id', 'person_type', ['id'], unique=False)
    op.create_table('lab_experiment_result_reading',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('parameter_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('parameter_value', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('sample_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parameter_id'], ['lab_experiment_parameter.id'], name='lab_experiment_result_reading_parameter_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sample_id'], ['lab_collected_sample.id'], name='lab_experiment_result_reading_sample_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_experiment_result_reading_pkey')
    )
    op.create_index('ix_lab_experiment_result_reading_id', 'lab_experiment_result_reading', ['id'], unique=False)
    op.create_table('product_barcode',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('barcode', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('product_packaging_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_packaging_id'], ['pharmacy_drug_form_package.id'], name='product_barcode_product_packaging_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='product_barcode_pkey')
    )
    op.create_index('ix_product_barcode_id', 'product_barcode', ['id'], unique=False)
    op.create_table('organization_people',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('organization_people_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('person_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.CheckConstraint('person_id IS NOT NULL OR organization_id IS NOT NULL', name='check_at_least_one_entity'),
    sa.ForeignKeyConstraint(['organization_id'], ['organization.id'], name='organization_people_organization_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['person_id'], ['person.id'], name='organization_people_person_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='organization_people_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_organization_people_id', 'organization_people', ['id'], unique=False)
    op.create_table('lab_service_group',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('group_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('group_desc', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='lab_service_group_pkey')
    )
    op.create_index('ix_lab_service_group_id', 'lab_service_group', ['id'], unique=False)
    op.create_table('client_drug_allergy',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('drug_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('detail', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('risk_severity', postgresql.ENUM('Low', 'Medium', 'High', name='severity'), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='client_drug_allergy_pkey')
    )
    op.create_index('ix_client_drug_allergy_id', 'client_drug_allergy', ['id'], unique=False)
    op.create_table('referred_transaction_settlement_detail',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('settlement_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ref_transaction_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['ref_transaction_id'], ['referred_transaction.id'], name='referred_transaction_settlement_detail_ref_transaction_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['settlement_id'], ['referred_transaction_settlement.id'], name='referred_transaction_settlement_detail_settlement_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='referred_transaction_settlement_detail_pkey')
    )
    op.create_index('ix_referred_transaction_settlement_detail_id', 'referred_transaction_settlement_detail', ['id'], unique=False)
    op.create_table('user_role',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_role_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('role_name', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('role_type', postgresql.ENUM('Dynamic', 'Static', name='moduletype'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_role_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_user_role_id', 'user_role', ['id'], unique=False)
    op.create_table('laboratory',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('laboratory_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('lab_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('lab_desc', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='laboratory_pkey'),
    sa.UniqueConstraint('lab_name', name='uq_lab_name', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_laboratory_id', 'laboratory', ['id'], unique=False)
    op.create_table('pharmacy_drug_category_tag',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('group_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('drug_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['drug_id'], ['pharmacy_drug.id'], name='pharmacy_drug_category_tag_drug_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['group_id'], ['pharmacy_drug_category.id'], name='pharmacy_drug_category_tag_group_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pharmacy_drug_category_tag_pkey')
    )
    op.create_index('ix_pharmacy_drug_category_tag_id', 'pharmacy_drug_category_tag', ['id'], unique=False)
    op.create_table('lab_sample_result',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('lab_sample_result_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('sample_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('Issued', 'Archived', 'Ready', 'Approved', name='resultstatus'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='lab_sample_result_created_by_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['sample_id'], ['lab_collected_sample.id'], name='lab_sample_result_sample_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_sample_result_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_lab_sample_result_id', 'lab_sample_result', ['id'], unique=False)
    op.create_table('user_privilege_listing',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('privilege', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['user_role.id'], name='user_privilege_listing_role_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_privilege_listing_pkey')
    )
    op.create_index('ix_user_privilege_listing_id', 'user_privilege_listing', ['id'], unique=False)
    op.create_table('lab_experiment',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='lab_experiment_pkey')
    )
    op.create_index('ix_lab_experiment_id', 'lab_experiment', ['id'], unique=False)
    op.create_table('client_occupation',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('client_occupation_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('occupation', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='client_occupation_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_client_occupation_id', 'client_occupation', ['id'], unique=False)
    op.create_table('user_auth_Logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('log_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('activity', postgresql.ENUM('Modification', 'Login', name='authactivity'), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_auth_Logs_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='user_auth_Logs_pkey')
    )
    op.create_index('ix_user_auth_Logs_id', 'user_auth_Logs', ['id'], unique=False)
    op.create_table('pharmacy_drug',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('pharmacy_drug_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('active_ingredients', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('storage_conditions', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('warnings', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('interactions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('contraindications', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('side_effects', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('drug_image_url', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], name='pharmacy_drug_product_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pharmacy_drug_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_pharmacy_drug_id', 'pharmacy_drug', ['id'], unique=False)
    op.create_table('pharmacy_prescription',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('pharmacy_prescription_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('consultant_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pharmacy_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('Pending', 'Dispensed', 'All', 'PatiallyDispensed', name='prescriptionstatus'), autoincrement=False, nullable=True),
    sa.Column('instruction', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('note', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], name='pharmacy_prescription_client_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['consultant_id'], ['consultant_specialist.id'], name='pharmacy_prescription_consultant_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['pharmacy_id'], ['pharmacy.id'], name='pharmacy_prescription_pharmacy_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pharmacy_prescription_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_pharmacy_prescription_id', 'pharmacy_prescription', ['id'], unique=False)
    op.create_table('lga',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('lga_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('lga', sa.VARCHAR(length=25), autoincrement=False, nullable=False),
    sa.Column('state_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['state_id'], ['state.id'], name='lga_state_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lga_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_lga_id', 'lga', ['id'], unique=False)
    op.create_table('pharmacy_prescription_detail',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('drug_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('prescription_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('form', postgresql.ENUM('Tablet', 'Capsule', 'Syrup', 'Suspension', 'Solution', 'Injection', 'Cream', 'Ointment', 'Gel', 'Lotion', 'Patch', 'Suppository', 'Powder', 'Lozenge', 'Spray', 'Drop', 'Inhaler', 'Granule', 'Foam', 'Enema', name='form'), autoincrement=False, nullable=True),
    sa.Column('frequency', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('weight_volume', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('interval', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    sa.Column('dosage', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    sa.Column('duration', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('Pending', 'Dispensed', 'All', 'PatiallyDispensed', name='prescriptionstatus'), autoincrement=False, nullable=True),
    sa.Column('is_prn', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['drug_id'], ['pharmacy_drug.id'], name='pharmacy_prescription_detail_drug_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['prescription_id'], ['pharmacy_prescription.id'], name='pharmacy_prescription_detail_prescription_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pharmacy_prescription_detail_pkey')
    )
    op.create_index('ix_pharmacy_prescription_detail_id', 'pharmacy_prescription_detail', ['id'], unique=False)
    op.create_table('supplier',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('supplier_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('org_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organization.id'], name='supplier_org_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='supplier_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_supplier_id', 'supplier', ['id'], unique=False)
    op.create_table('lab_service',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('lab_service_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('lab_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lab_service_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('lab_service_desc', sa.VARCHAR(length=150), autoincrement=False, nullable=True),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['lab_id'], ['laboratory.id'], name='lab_service_lab_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['service_listing.service_id'], name='lab_service_service_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_service_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_lab_service_id', 'lab_service', ['id'], unique=False)
    op.create_table('lab_verified_result',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('result_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('verified_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('verified_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('Issued', 'Archived', 'Ready', 'Approved', name='resultstatus'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['result_id'], ['lab_sample_result.id'], name='lab_verified_result_result_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['verified_by'], ['users.id'], name='lab_verified_result_verified_by_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_verified_result_pkey')
    )
    op.create_index('ix_lab_verified_result_id', 'lab_verified_result', ['id'], unique=False)
    op.create_table('lab_collected_sample',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('queue_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('collected_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('sample_type', postgresql.ENUM('Urine', 'Feaces', 'Blood', 'Skin_Swap', 'Saliva', name='sampletype'), autoincrement=False, nullable=True),
    sa.Column('collected_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('container_label', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('All', 'Waiting', 'Processed', 'Processing', 'Cancelled', name='queuestatus'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['collected_by'], ['users.id'], name='lab_collected_sample_collected_by_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['queue_id'], ['lab_service_queue.id'], name='lab_collected_sample_queue_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_collected_sample_pkey')
    )
    op.create_index('ix_lab_collected_sample_id', 'lab_collected_sample', ['id'], unique=False)
    op.create_table('organization',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('organization_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(length=11), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('lga_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['lga_id'], ['lga.id'], name='organization_lga_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='organization_pkey'),
    sa.UniqueConstraint('email', name='organization_email_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_organization_id', 'organization', ['id'], unique=False)
    op.create_table('service_booking_communication',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('booking_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mode', postgresql.ENUM('Email', 'SMS', 'WhatsApp', 'Phone', name='communicationmode'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['service_booking.id'], name='service_booking_communication_booking_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='service_booking_communication_pkey')
    )
    op.create_index('ix_service_booking_communication_id', 'service_booking_communication', ['id'], unique=False)
    op.create_table('product',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('product_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('brand_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('product_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('product_desc', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('manufacturer', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='product_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_product_name', 'product', ['product_desc'], unique=False)
    op.create_index('ix_product_id', 'product', ['id'], unique=False)
    op.create_index('ix_brand_name', 'product', ['brand_name'], unique=False)
    op.create_table('client_vital',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('vital_type', postgresql.ENUM('BMI', 'BloodGlucose', 'BloodPressure', 'Weight', 'Tempreture', name='vitaltype'), autoincrement=False, nullable=True),
    sa.Column('vital_value', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('client_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], name='client_vital_client_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='client_vital_pkey')
    )
    op.create_index('ix_client_vital_id', 'client_vital', ['id'], unique=False)
    op.create_table('service_booking_communication_log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('booking_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('mode', postgresql.ENUM('Email', 'SMS', 'WhatsApp', 'Phone', name='communicationmode'), autoincrement=False, nullable=True),
    sa.Column('message', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('log_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['booking_id'], ['service_booking.id'], name='service_booking_communication_log_booking_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='service_booking_communication_log_pkey')
    )
    op.create_index('ix_service_booking_communication_log_id', 'service_booking_communication_log', ['id'], unique=False)
    op.create_table('lab_result',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='lab_result_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='lab_result_pkey')
    )
    op.create_index('ix_lab_result_id', 'lab_result', ['id'], unique=False)
    op.create_table('approved_lab_booking_result',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('booking_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('approved_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('Issued', 'Archived', 'Ready', 'Approved', name='resultstatus'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['approved_by'], ['users.id'], name='approved_lab_booking_result_approved_by_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['booking_id'], ['service_booking.id'], name='approved_lab_booking_result_booking_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='approved_lab_booking_result_pkey')
    )
    op.create_index('ix_approved_lab_booking_result_id', 'approved_lab_booking_result', ['id'], unique=False)
    op.create_table('user_group',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('group_name', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('group_desc', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='user_group_pkey')
    )
    op.create_index('ix_user_group_id', 'user_group', ['id'], unique=False)
    op.create_table('referred_transaction_settlement',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_for', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='referred_transaction_settlement_created_by_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_for'], ['client_referral.id'], name='referred_transaction_settlement_created_for_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='referred_transaction_settlement_pkey')
    )
    op.create_index('ix_referred_transaction_settlement_id', 'referred_transaction_settlement', ['id'], unique=False)
    op.create_table('payment',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('payment_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('payment_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('amount', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('payment_method', postgresql.ENUM('PoS', 'BankTransfer', 'Paystack', 'Cash', name='paymentmethod'), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], name='payment_transaction_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='payment_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='payment_pkey')
    )
    op.create_index('ix_payment_id', 'payment', ['id'], unique=False)
    op.create_table('consultant_schedule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('date_of_consultation', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('specialist_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['specialist_id'], ['consultant_specialist.id'], name='consultant_schedule_specialist_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='consultant_schedule_pkey')
    )
    op.create_index('ix_specialist_idx', 'consultant_schedule', ['specialist_id'], unique=False)
    op.create_index('ix_consultant_schedule_id', 'consultant_schedule', ['id'], unique=False)
    op.create_table('supply_detail',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('manufacture_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('expiry_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('supply_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('product_packaging_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], name='supply_detail_product_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_packaging_id'], ['product_package.id'], name='supply_detail_product_packaging_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['supply_id'], ['supply.id'], name='supply_detail_supply_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='supply_detail_pkey')
    )
    op.create_index('ix_supply_detail_id', 'supply_detail', ['id'], unique=False)
    # ### end Alembic commands ###
